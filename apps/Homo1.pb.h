// Generated by the property buffer compiler. DO NOT EDIT!
// source: Homo1.prop

#ifndef HOMO1_PROPERTY_BUFFER_H
#define HOMO1_PROPERTY_BUFFER_H

#include <cctype>
#include <cstdlib>
#include "parallel.h"

namespace Homo1 {

typedef int intE;
typedef unsigned int uintE;

namespace BFS_Prop {

class Parents {
public:
  Parents(size_t n) {
    data = (uintE*) malloc(sizeof(uintE) * n);
    parallel_for (int i = 0; i < n; ++i) {
      data[i] = UINT_MAX;
    }
  }
  ~Parents() {
    free(data);
  }
  inline uintE operator[] (int i) const { return data[i]; }
  inline uintE& operator[] (int i) { return data[i]; }
  inline uintE get (int i) const { return data[i]; }
  inline uintE& get (int i) { return data[i]; }
  inline uintE* get_addr (int i) { return &(data[i]); }
  inline uintE* get_data () { return data; }
  inline void set (int i, uintE val) { data[i] = val; }
private:
  uintE* data;
};

} // namespace BFS_Prop

namespace Components_Prop {

class CurrIDs {
public:
  CurrIDs(size_t n) {
    data = (uintE*) malloc(sizeof(uintE) * n);
    auto lambda = [](int i) -> uintE { return i; };
    parallel_for (int i = 0; i < n; ++i) {
      data[i] = lambda(i);
    }
  }
  ~CurrIDs() {
    free(data);
  }
  inline uintE operator[] (int i) const { return data[i]; }
  inline uintE& operator[] (int i) { return data[i]; }
  inline uintE get (int i) const { return data[i]; }
  inline uintE& get (int i) { return data[i]; }
  inline uintE* get_addr (int i) { return &(data[i]); }
  inline uintE* get_data () { return data; }
  inline void set (int i, uintE val) { data[i] = val; }
private:
  uintE* data;
};

class PrevIDs {
public:
  PrevIDs(size_t n) {
    data = (uintE*) malloc(sizeof(uintE) * n);
  }
  ~PrevIDs() {
    free(data);
  }
  inline uintE operator[] (int i) const { return data[i]; }
  inline uintE& operator[] (int i) { return data[i]; }
  inline uintE get (int i) const { return data[i]; }
  inline uintE& get (int i) { return data[i]; }
  inline uintE* get_addr (int i) { return &(data[i]); }
  inline uintE* get_data () { return data; }
  inline void set (int i, uintE val) { data[i] = val; }
private:
  uintE* data;
};

} // namespace Components_Prop

class Property {
public:
  size_t n;
  Property(size_t _n): n(_n) {}
  inline BFS_Prop::Parents* add_Parents() {
    BFS_Prop::Parents* Parents = new BFS_Prop::Parents(n);
    return Parents;
  }
  inline Components_Prop::CurrIDs* add_CurrIDs() {
    Components_Prop::CurrIDs* CurrIDs = new Components_Prop::CurrIDs(n);
    return CurrIDs;
  }
  inline Components_Prop::PrevIDs* add_PrevIDs() {
    Components_Prop::PrevIDs* PrevIDs = new Components_Prop::PrevIDs(n);
    return PrevIDs;
  }
};


} // namespace Homo1

#endif // HOMO1_PROPERTY_BUFFER_H
